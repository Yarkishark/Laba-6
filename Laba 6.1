"""1 часть – написать программу в соответствии со своим вариантом задания. 
Написать 2 варианта формирования (алгоритмический и с помощью функций Питона), 
сравнив по времени их выполнение."""

import itertools
import time

def variant1():

    print("Вариант с помощью функций Питона.")

    def distance(p1, p2):
        return (p2[0] - p1[0])**2 + (p2[1] - p1[1])**2

    def is_square(p1, p2, p3, p4):
        distances = [distance(p1, p2), distance(p1, p3), distance(p1, p4),
                     distance(p2, p3), distance(p2, p4), distance(p3, p4)]
        distances.sort()
        return distances[0] > 0 and distances[0] == distances[1] == distances[2] == distances[3] and distances[4] == distances[5]

    def find_squares(points):
        squares = []
        for square in itertools.combinations(points, 4):
            if is_square(*square):
                squares.append(square)
             
        return squares

    def main():
        while True:
            try:
                k = int(input("Введите количество точек: "))
                if k <= 3:
                    print("Ошибка! Введите число равное 4 или кратное четырём.")
                else:
                    break
            except ValueError:
                print("Ошибка! Пожалуйста, введите количество точек целым числом.")

        points = []
        for i in range(k):
            while True:
                try:
                    x, y = map(int, input(f"Введите координаты {i+1} точки (через пробел): ").split())
                    if (x, y) in points:
                        print("Ошибка! Точка с такими координатами уже была введена. Пожалуйста, введите другие координаты.")
                        continue
                    break
                except ValueError:
                    print("Ошибка! Пожалуйста, введите две координаты для точки.")
            points.append((x, y))
    
        squares = find_squares(points)
        if squares:
            print("Возможные вершины квадрата:")
            for square in squares:
                print(square)
        else:
            print("Из данных точек невозможно образовать квадрат(ы).")

    if __name__ == "__main__":
        main()

print('-' * 30)

def variant2():
    
    print("Вариант алгоритмический.")

    def distance(p1, p2):
        return (p2[0] - p1[0])**2 + (p2[1] - p1[1])**2

    def is_square(p1, p2, p3, p4):
        d2 = distance(p1, p2)
        d3 = distance(p1, p3)
        d4 = distance(p1, p4)

        if d2 == 0 or d3 == 0 or d4 == 0:
            return False

        if d2 == d3 and 2 * d2 == d4 and 2 * distance(p2, p4) == distance(p2, p3):
            return True

        if d3 == d4 and 2 * d3 == d2 and 2 * distance(p3, p2) == distance(p3, p4):
            return True

        if d2 == d4 and 2 * d2 == d3 and 2 * distance(p2, p3) == distance(p2, p4):
            return True

        return False

    def find_squares(points):
        squares = []
        n = len(points)
        for i in range(n):
            p1 = points[i]
            for j in range(i + 1, n):
                p2 = points[j]
                for k in range(j + 1, n):
                    p3 = points[k]
                    for l in range(k + 1, n):
                        p4 = points[l]
                        if is_square(p1, p2, p3, p4):
                            squares.append([p1, p2, p3, p4])
        
        return squares

    def main():
        while True:
            try:
                k = int(input("Введите количество точек: "))
                if k <= 3:
                    print("Ошибка! Введите число равное 4 или кратное четырём.")
                else:
                    break
            except ValueError:
                print("Ошибка! Пожалуйста, введите количество точек целым числом.")

        points = []
        for i in range(k):
            while True:
                try:
                    x, y = map(int, input(f"Введите координаты {i+1} точки (через пробел): ").split())
                    if (x, y) in points:
                        print("Ошибка! Точка с такими координатами уже была введена. Пожалуйста, введите другие координаты.")
                        continue
                    break
                except ValueError:
                    print("Ошибка! Пожалуйста, введите две координаты для точки.")
            points.append((x, y))
    
        squares = find_squares(points)
        if squares:
            print("Возможные вершины квадрата:")
            for square in squares:
                print(square)
        else:
            print("Из данных точек невозможно образовать квадрат(ы).")

    if __name__ == "__main__":
        main()

start_time = time.time()
variant1()
end_time = time.time()
print(f"Время выполнения первого варианта программы: {end_time - start_time} секунд")

start_time = time.time()
variant2()
end_time = time.time()
print(f"Время выполнения второго варианта программы: {end_time - start_time} секунд")
